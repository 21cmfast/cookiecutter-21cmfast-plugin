[metadata]
name = {{ cookiecutter.distribution_name }}
description = {{ '{0!r}'.format(cookiecutter.project_short_description).lstrip('ub') }}
author = {{ '{0!r}'.format(cookiecutter.full_name).lstrip('ub') }}
author_email = {{ '{0!r}'.format(cookiecutter.email).lstrip('ub') }}
license = MIT
long_description = file: README.rst
long_description_content_type = text/x-rst; charset=UTF-8
url = https://github.com/{{ cookiecutter.repo_username }}/{{ cookiecutter.repo_name }}
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 3 - Alpha
    Intended Audience :: Science/Research
    License :: OSI Approved :: MIT License
    Natural Language :: English
    Topic :: Scientific/Engineering :: Physics
    Topic :: Scientific/Engineering :: Astronomy
    Operating System :: Unix
    Operating System :: POSIX
    Programming Language :: Python
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: Implementation :: CPython

[options]
zip_safe = False
packages = find:
include_package_data = True
package_dir =
    =src
python_requires = >={{ cookiecutter.min_python_version }}
setup_requires =
{% if cookiecutter.c_extension_support == 'yes' %}
    # We only require CFFI when compiling.
    # pyproject.toml does not support requirements only for some build actions,
    # but we can do it in setup.py.
    cffi>=1.0.0
{% endif %}

install_requires =
{% if cookiecutter.command_line_interface == 'yes' %}
        click
{% endif %}
{% if cookiecutter.c_extension_support == 'yes' %}
        cffi>=1.0.0
{% endif %}

[options.packages.find]
where = src
exclude =
    tests

{%- if cookiecutter.command_line_interface != 'no' %}
[options.entry_points]
# Add here console scripts like:
console_scripts =
     {{ cookiecutter.command_line_interface_bin_name }} = {{ cookiecutter.package_name }}.cli:main
{%- endif %}

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install edges-io[PDF]` like:
# PDF = ReportLab; RXP
# Add here test requirements (semicolon/line-separated)
{% if cookiecutter.sphinx_docs == "yes" %}
docs =
    sphinx
    nbsphinx
    ipython
    numpydoc>=0.8
    sphinx_rtd_theme
{% endif %}
tests = 
    pytest
    pytest-cov
    pre-commit
dev =
{% if cookiecutter.sphinx_docs == "yes" %}
    sphinx
    nbsphinx
    ipython
    numpydoc>=0.8
    sphinx_rtd_theme
{%- endif %}
    pytest
    pytest-cov
    pre-commit
    commitizen

    
{% if cookiecutter.c_extension_support == "no" %}
[bdist_wheel]
universal = 1
{% endif %}

[tool:pytest]
# If a pytest section is found in one of the possible config files
# (pytest.ini, tox.ini or setup.cfg), then pytest will not look for any others,
# so if you add a pytest config section elsewhere,
# you will need to delete this section from setup.cfg.
norecursedirs =
    migrations
python_files =
    test_*.py
    *_test.py
    tests.py
addopts =
    -ra
    --strict-markers
    --doctest-modules
    --doctest-glob=\*.rst
    --tb=short
    --cov {{cookiecutter.package_name}} 
    --cov-report term-missing
    --verbose
    --durations=25
testpaths =
    tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
formats = bdist_wheel

[tool:isort]
known_first_party = {{ cookiecutter.package_name }}
default_section = THIRDPARTY
forced_separate = test_{{ cookiecutter.package_name }}
skip = .tox,.eggs,ci/templates,build,dist,.venv
indent='    '
known_standard_library=setuptools,pkg_resources
known_test=pytest
sections=FUTURE,STDLIB,TEST,THIRDPARTY,FIRSTPARTY,LOCALFOLDER
profile=black

